{"name":"Compass-API","tagline":"Giving context to geospatial data","body":"## Meet Compass-API\r\nCompass-API is a framework that allows to create a RESTful API service for publishing geospatial data (point geometries) without programming.  The API returns the geometries contained on a ratio distance from the specified location coordinate.  Data is returned in JSON format.  Compass-API has the functionality for returning features using the GeoJSON specificationn for easy integration and rendering with multiple map libraries.\r\n\r\nThis project was developed for the [TechSummitPR](http://techsummitpr.com) as part of the [National Day of Civic Hacking 2013](http://hackforchange.org).\r\n\r\n## Requirements and Installation\r\nCompass-API requires:\r\n- PostgreSQL 1.9\r\n- PostGIS 2.0+\r\n- Ruby 1.9.3\r\n\r\nPostgreSQL with the PostGIS extensions must be installed and enabled on your database.\r\n\r\nCompass-API can be installed by simply downloading or cloning this repository and executing `bundle setup`.\r\n\r\nDatabase connection parameters are defined on the `config/database.yml` file.\r\n\r\n## How does it work?\r\n\r\nAn API is built in three single steps:\r\n\r\n### 1. Import your Shapefiles\r\n\r\nOnce your PostgreSQL and PostGIS are configured and enabled, a shapefile can be imported using the `shp2psql` command line tool:\r\n\r\n```\r\n$ shp2psql -s 4326 myshapefile.shp table_name\r\n```\r\n\r\nProjection must be specified using the `-s SRID` parameter and it can handle reprojection by specifying the current and the desired projections: `-s SRID:NEW_SRID`.\r\n\r\n```\r\n$ shp2psql -s 2866:4326 myshapefile.shp table_name\r\n```\r\n\r\n**Layers must be defined using the WGS84 projection (EPSG:4326)**\r\n\r\nEncoding can be specified using the `-W` parameter.\r\n\r\n**Note: Compass-API only works with POINT geometries.**\r\n\r\n### 2. Define your API using YAML\r\n\r\nAPI resources are defined on a YAML file without having to do any programming.  You must edit the `config/api.yml` file like this:\r\n\r\n```\r\n---\r\n- :resource: hydrant\r\n  :table_name: hydrant\r\n  :geometry_column: geom\r\n  :columns:\r\n  - :facilityid\r\n  - :owner\r\n  - :watertype\r\n```\r\n\r\n`:resource` - Defines the URL resource name.\r\n\r\n`:table_name` - Specifies the database table for your resource.\r\n\r\n`:geometry_column` - Specifies the geometry column _(Projection must be WGS84)_\r\n\r\n`:columns` - List of table columns that will be included as attributes for each geometry.\r\n\r\n### 3. Start Compass-API\r\n\r\nExecute `ruby server.rb -vs` on the Compass-API directory.\r\n\r\n## API resource structure\r\n\r\nResources are defined with the following structure: `/compass/[:resource]?lnglat=0.0,0.0`\r\n\r\nThe `lnglat` or `latlng` parameter must be always specified.\r\n\r\nAn optional `dist` parameter is available for specifying the ratio distance in miles.  If not specified, defaults to `1`.\r\n\r\nA `feature` resource is available for returning data as a GeoJSON `FeatureCollection`:\r\n\r\n`/compass/[:resource]/feature?lnglat=0.0,0.0`\r\n\r\n## Authors and Contributors\r\nDeveloped by Alberto A. Col√≥n Viera (@albertico).\r\n\r\nYou can contact Alberto on [Twitter](https://twitter.com/alberti_co) or via [Email](mailto://aacv@alberti.co) / [GMail](mailto://alberto.a.colon.viera@gmail.com).\r\n\r\n## License\r\nThis project is open sourced under [GNU GPL Version 3](http://www.gnu.org/licenses/gpl-3.0.html).\r\n","google":"UA-42137911-1","note":"Don't delete this file! It's used internally to help with page regeneration."}